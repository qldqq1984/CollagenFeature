function[X,F V] = rand3dnet2(NF,L,D,coltype,Lmax,rseed)
%RAND3DNET - generates a 3d network given num fibers, length, and diam^2
%rand3dnet(NF,L,D2,plotflag)
%  NF = number of fibers
%  L  = length
%  D2 = squared diameter of a segment
%  plotflag = flag for plotting final result
%*****************************************************************************/
%*                _______________________________________                    */
%*              <<      Written by T. Stylianopoulos     >>                  */
%*              << University of Minnesota (Twin Cities) >>                  */
%*              <<   Academic Advisor: Victor Barocas    >>                  */
%*              <<    E-Mail: styliano@cems.umn.edu      >>                  */
%*              <<        Phone: (612) 626-9032          >>                  */
%*                _______________________________________                    */
%*              Modified significantnly by A. Stein
%*              University of Michigan (Ann Arbor)
%*              Advisors: Len Sander and Trace Jackson
%               email: amstein@umich.edu
%*****************************************************************************/
%
%


eps = 1e-10;
mag = inline('sqrt(sum(A.^2,2))','A'); %for computing magnitude of vectors

switch coltype %collision type
    case{1,'T','Barocas','original'}
        Lmax = Inf;
    case{2,'Stein2','fixedlen'
end

if nargin==0
    NF =180; % Number of Fibers
    L  = 0.1; % Length of a segment in scaled units
    D = 0.03; % Squared Diameter of a segment in scaled units
end

NS = 2 * NF; % Number of "segments."  Since each fiber
%                       can grow in two directions, N = 2*NF
NL = NS; % Number of "living" segments
NT=2*NF; % Number of Nodes that are not seeds

%initial seeds - declare in this way so that
%as NF increases, the network stays the same with just the addition of
%another fiber
    if nargin >= 5
        rand('seed',rseed)
    end
    
    X0 = zeros(NF,3);
    DX1= zeros(NF,3);
    for i=1:NF
        X0(i,:)  = rand(1,3);
        DX1(i,:) = rand(1,3)-0.5;
    end
%seeds can go in both directions, so we double the number in X     
    X(1:2:NF*2,:) = X0;
    X(2:2:NF*2,:) = X0;

%fiber directions
    D1  = sqrt(sum(DX1.^2,2));
    DX1 = DX1./(D1*ones(1,3));
    
    DX(1:2:NF*2,:) =  DX1;
    DX(2:2:NF*2,:) = -DX1;

%some things i'm not yet sure what they are
    p0 = 1:NF;
    a  = 1:2*NF;

% Create vector of "living" segments
    live = 1:NL;

%create a Fiber and Vertex structure
for i=1:NF
	F(i).v = [2*i-1 2*i];
	V(2*i-1).f = i;
	V(2*i).f   = i;
end
	

% The network generation begins

% Start adding monomer
while (NL > 0)
   j = floor(rand*NL)+1;  % Select fiber to update
   k = live(j);
   fk= ceil(k/2);

   X(k,:) = X(k,:) + L*DX(k,:);
   Xk     = X(k,:);

   % Check for fiber out of the box
   % Check for fiber out of the box
       u(1:3) = (Xk - 1.0);
       u(4:6) = (-Xk)     ;
       Lu     = max(u);
   
    % Check to see if fiber is too long
       flen = mag(X(2*k-1,:)-X(2*k,:));
       
       
   if (Lu > 0) % Fiber out of box
       Xk = Xk - Lu*DX(k,:);
       live = setdiff(live,k);
       NL = NL-1;

   elseif flen > Lenmax
       live = setdiff(live,k);
       NL = NL - 1;
       Xk = Xk - L*DX(k,:);
       
   else %fiber is still in the box, so check for fiber-fiber collision
        
        %generate 3 vectors that form a triangle, s.t. A+B = C
        %where Xk is the point of interest and teh Xs are teh end of all
        %the fibers            
            X1   = X(1:2:end,:);
            X2   = X(2:2:end,:);        
            XK   = ones(NF,1)*Xk;

            A    =   XK -  X1;
            B    =   X2 -  XK;
            C    =   X2 -  X1;        
            Amag = mag(A);
            Bmag = mag(B);
            Cmag = mag(C);   

       %first ensure that the point is near the actual fiber
            ind = find(Amag < Cmag & Bmag < Cmag);
            ind = setdiff(ind,k); %make sure fiber can't intersect with itself
            
       %compute distance of Xk to the line from X1 to X2 = dot(C,A)/mag(A)
            Cdir  = C(ind,:)./(Cmag(ind,:)*[1 1 1] + eps); %direction of the C vector
            CcompA= sum(Cdir.*A(ind,:),2)*[1 1 1] .* Cdir; %component of A pointing in the C direction
            XKC   = CcompA - A(ind,:);
            XKCmag= mag(XKC);

            
       %find any cases where dXkC is smaller than threshold.  we have
       %collisions there
       
            [minD iind]  = min(XKCmag); %col. stands for collision.  find where the collision occurs
            if minD < D
                indcol = ind(iind(1)); %if there are multiple equal answers, take just the first
                iind   = iind(1);
                switch coltype
                    case{1,'T','Barocas','original'}
                        %move Xk so that it exactly intersects the fiber it
                        %collides with
                            Xk = X1(indcol,:) + CcompA(iind,:);

                        %update fiber and vectex indices.  note the fiber
                        %indices may not be sorted properly
                            V(k).f(end+1) = indcol;
                            
                            fv = F(indcol).v;
                            
                            if length(fv)==2
                                F(indcol).v   = [fv(1) k fv(end)];
                            else%we need to find the right place to put the vertex
                                %such that it is in between the proper
                                %vertices
                                fvnew = [fv k];
                                
                                x = X(fvnew,1);
                                [xsort ii] = sort(x);
                                
                                if x(1)==xsort(end)
                                    ii=fliplr(ii);
                                end
                                F(indcol).v = fvnew(ii);
                            end
                        
                        %kill segment in 
                            live = setdiff(live,k);
                            NL   = NL - 1;
                end
            end
   end
   %update X
       X(k,:) = Xk;
end